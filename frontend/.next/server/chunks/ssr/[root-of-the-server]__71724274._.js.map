{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///Users/aviasnani/Desktop/computer%20demo/cs-demo/repo/frontend/src/services/gitHubService.js"],"sourcesContent":["// githubKeyService.js\nimport sshpk from 'sshpk';\n\nclass GitHubKeyService {\n  async uploadPublicKey(publicKeyPem, githubToken, keyTitle = 'SecureChat Key') {\n    try {\n      const sshKey = this.convertPEMtoSSH(publicKeyPem); \n\n      const response = await fetch('https://api.github.com/user/keys', {\n        method: 'POST',\n        headers: {\n          'Authorization': `token ${githubToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title: `${keyTitle} - ${new Date().toISOString().split('T')[0]}`,\n          key: sshKey\n        })\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(`GitHub API error: ${response.status} - ${error.message}`);\n      }\n\n      const keyData = await response.json();\n      console.log(' Public key uploaded to GitHub:', keyData.id);\n      return keyData;\n\n    } catch (error) {\n      console.error(' Failed to upload key to GitHub:', error);\n      throw error;\n    }\n  }\n\n  async fetchUserPublicKeys(githubUsername) {\n    console.log('[GITHUB] Fetching SSH keys for GitHub user:', githubUsername);\n    const url = `https://api.github.com/users/${githubUsername}/keys`;\n    console.log('[GITHUB] API URL:', url);\n\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: { 'Accept': 'application/vnd.github+json' }\n    });\n\n    console.log('[GITHUB] Response status:', response.status);\n    \n    if (!response.ok) {\n      if (response.status === 404) {\n        console.error(' [GITHUB] User not found or has no public SSH keys');\n        throw new Error(`GitHub user '${githubUsername}' not found or has no public SSH keys`);\n      }\n      throw new Error(`GitHub responded with ${response.status}`);\n    }\n\n    const keysData = await response.json();\n    console.log('[GITHUB] Found', keysData.length, 'SSH keys');\n    console.log(' [GITHUB] Keys data:', keysData);\n    \n    const rsaKeys = keysData\n      .map(k => k.key)\n      .filter(key => key.startsWith('ssh-rsa'));\n      \n    console.log('[GITHUB] RSA keys found:', rsaKeys.length);\n    \n    if (rsaKeys.length === 0) {\n      throw new Error(`GitHub user '${githubUsername}' has no RSA SSH keys`);\n    }\n    \n    return rsaKeys;\n  }\n\n  convertSSHtoPEM(sshKey) {\n    try {\n      const key = sshpk.parseKey(sshKey, 'ssh');\n      return key.toString('pem');\n    } catch (error) {\n      throw new Error(`Failed to convert SSH to PEM: ${error.message}`);\n    }\n  }\n\n  convertPEMtoSSH(pemKey) {\n    try {\n      const key = sshpk.parseKey(pemKey, 'pem');\n      return key.toString('ssh');\n    } catch (error) {\n      throw new Error(`Failed to convert PEM to SSH: ${error.message}`);\n    }\n  }\n}\n\nexport default new GitHubKeyService();"],"names":[],"mappings":"AAAA,sBAAsB;;;;AACtB;;AAEA,MAAM;IACJ,MAAM,gBAAgB,YAAY,EAAE,WAAW,EAAE,WAAW,gBAAgB,EAAE;QAC5E,IAAI;YACF,MAAM,SAAS,IAAI,CAAC,eAAe,CAAC;YAEpC,MAAM,WAAW,MAAM,MAAM,oCAAoC;gBAC/D,QAAQ;gBACR,SAAS;oBACP,iBAAiB,CAAC,MAAM,EAAE,aAAa;oBACvC,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;oBACnB,OAAO,GAAG,SAAS,GAAG,EAAE,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE;oBAChE,KAAK;gBACP;YACF;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;gBACjC,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,SAAS,MAAM,CAAC,GAAG,EAAE,MAAM,OAAO,EAAE;YAC3E;YAEA,MAAM,UAAU,MAAM,SAAS,IAAI;YACnC,QAAQ,GAAG,CAAC,mCAAmC,QAAQ,EAAE;YACzD,OAAO;QAET,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,oCAAoC;YAClD,MAAM;QACR;IACF;IAEA,MAAM,oBAAoB,cAAc,EAAE;QACxC,QAAQ,GAAG,CAAC,+CAA+C;QAC3D,MAAM,MAAM,CAAC,6BAA6B,EAAE,eAAe,KAAK,CAAC;QACjE,QAAQ,GAAG,CAAC,qBAAqB;QAEjC,MAAM,WAAW,MAAM,MAAM,KAAK;YAChC,QAAQ;YACR,SAAS;gBAAE,UAAU;YAA8B;QACrD;QAEA,QAAQ,GAAG,CAAC,6BAA6B,SAAS,MAAM;QAExD,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,IAAI,SAAS,MAAM,KAAK,KAAK;gBAC3B,QAAQ,KAAK,CAAC;gBACd,MAAM,IAAI,MAAM,CAAC,aAAa,EAAE,eAAe,qCAAqC,CAAC;YACvF;YACA,MAAM,IAAI,MAAM,CAAC,sBAAsB,EAAE,SAAS,MAAM,EAAE;QAC5D;QAEA,MAAM,WAAW,MAAM,SAAS,IAAI;QACpC,QAAQ,GAAG,CAAC,kBAAkB,SAAS,MAAM,EAAE;QAC/C,QAAQ,GAAG,CAAC,wBAAwB;QAEpC,MAAM,UAAU,SACb,GAAG,CAAC,CAAA,IAAK,EAAE,GAAG,EACd,MAAM,CAAC,CAAA,MAAO,IAAI,UAAU,CAAC;QAEhC,QAAQ,GAAG,CAAC,4BAA4B,QAAQ,MAAM;QAEtD,IAAI,QAAQ,MAAM,KAAK,GAAG;YACxB,MAAM,IAAI,MAAM,CAAC,aAAa,EAAE,eAAe,qBAAqB,CAAC;QACvE;QAEA,OAAO;IACT;IAEA,gBAAgB,MAAM,EAAE;QACtB,IAAI;YACF,MAAM,MAAM,qIAAA,CAAA,UAAK,CAAC,QAAQ,CAAC,QAAQ;YACnC,OAAO,IAAI,QAAQ,CAAC;QACtB,EAAE,OAAO,OAAO;YACd,MAAM,IAAI,MAAM,CAAC,8BAA8B,EAAE,MAAM,OAAO,EAAE;QAClE;IACF;IAEA,gBAAgB,MAAM,EAAE;QACtB,IAAI;YACF,MAAM,MAAM,qIAAA,CAAA,UAAK,CAAC,QAAQ,CAAC,QAAQ;YACnC,OAAO,IAAI,QAAQ,CAAC;QACtB,EAAE,OAAO,OAAO;YACd,MAAM,IAAI,MAAM,CAAC,8BAA8B,EAAE,MAAM,OAAO,EAAE;QAClE;IACF;AACF;uCAEe,IAAI","debugId":null}}]
}